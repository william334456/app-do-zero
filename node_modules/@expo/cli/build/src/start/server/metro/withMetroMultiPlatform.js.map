{"version":3,"sources":["../../../../../src/start/server/metro/withMetroMultiPlatform.ts"],"sourcesContent":["/**\n * Copyright Â© 2022 650 Industries.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport type { ExpoConfig, Platform } from '@expo/config';\nimport type Bundler from '@expo/metro/metro/Bundler';\nimport type { ConfigT } from '@expo/metro/metro-config';\nimport type {\n  Resolution,\n  ResolutionContext,\n  CustomResolutionContext,\n} from '@expo/metro/metro-resolver';\nimport { resolve as metroResolver } from '@expo/metro/metro-resolver';\nimport chalk from 'chalk';\nimport fs from 'fs';\nimport path from 'path';\nimport resolveFrom from 'resolve-from';\n\nimport {\n  createAutolinkingModuleResolverInput,\n  createAutolinkingModuleResolver,\n  AutolinkingModuleResolverInput,\n} from './createExpoAutolinkingResolver';\nimport { createFallbackModuleResolver } from './createExpoFallbackResolver';\nimport { createFastResolver, FailedToResolvePathError } from './createExpoMetroResolver';\nimport { isNodeExternal, shouldCreateVirtualCanary, shouldCreateVirtualShim } from './externals';\nimport { isFailedToResolveNameError, isFailedToResolvePathError } from './metroErrors';\nimport { getMetroBundlerWithVirtualModules } from './metroVirtualModules';\nimport { withMetroErrorReportingResolver } from './withMetroErrorReportingResolver';\nimport { withMetroMutatedResolverContext, withMetroResolvers } from './withMetroResolvers';\nimport { withMetroSupervisingTransformWorker } from './withMetroSupervisingTransformWorker';\nimport { Log } from '../../../log';\nimport { FileNotifier } from '../../../utils/FileNotifier';\nimport { env } from '../../../utils/env';\nimport { CommandError } from '../../../utils/errors';\nimport { installExitHooks } from '../../../utils/exit';\nimport { isInteractive } from '../../../utils/interactive';\nimport { loadTsConfigPathsAsync, TsConfigPaths } from '../../../utils/tsconfig/loadTsConfigPaths';\nimport { resolveWithTsConfigPaths } from '../../../utils/tsconfig/resolveWithTsConfigPaths';\nimport { isServerEnvironment } from '../middleware/metroOptions';\nimport { PlatformBundlers } from '../platformBundlers';\n\ntype Mutable<T> = { -readonly [K in keyof T]: T[K] };\n\nexport type StrictResolver = (moduleName: string) => Resolution;\nexport type StrictResolverFactory = (\n  context: ResolutionContext,\n  platform: string | null\n) => StrictResolver;\n\nconst ASSET_REGISTRY_SRC = `const assets=[];module.exports={registerAsset:s=>assets.push(s),getAssetByID:s=>assets[s-1]};`;\n\nconst debug = require('debug')('expo:start:server:metro:multi-platform') as typeof console.log;\n\nfunction withWebPolyfills(\n  config: ConfigT,\n  {\n    getMetroBundler,\n  }: {\n    getMetroBundler: () => Bundler;\n  }\n): ConfigT {\n  const originalGetPolyfills = config.serializer.getPolyfills\n    ? config.serializer.getPolyfills.bind(config.serializer)\n    : () => [];\n\n  const getPolyfills = (ctx: { platform?: string | null }): readonly string[] => {\n    const virtualEnvVarId = `\\0polyfill:environment-variables`;\n\n    getMetroBundlerWithVirtualModules(getMetroBundler()).setVirtualModule(\n      virtualEnvVarId,\n      (() => {\n        return `//`;\n      })()\n    );\n\n    const virtualModuleId = `\\0polyfill:external-require`;\n\n    getMetroBundlerWithVirtualModules(getMetroBundler()).setVirtualModule(\n      virtualModuleId,\n      (() => {\n        if (ctx.platform === 'web') {\n          return `global.$$require_external = typeof require !== \"undefined\" ? require : () => null;`;\n        } else {\n          // Wrap in try/catch to support Android.\n          return 'try { global.$$require_external = typeof expo === \"undefined\" ? require : (moduleId) => { throw new Error(`Node.js standard library module ${moduleId} is not available in this JavaScript environment`);} } catch { global.$$require_external = (moduleId) => { throw new Error(`Node.js standard library module ${moduleId} is not available in this JavaScript environment`);} }';\n        }\n      })()\n    );\n\n    const virtualModulesPolyfills = [virtualModuleId, virtualEnvVarId];\n\n    if (ctx.platform === 'web') {\n      try {\n        const rnGetPolyfills: () => string[] = require('react-native/rn-get-polyfills');\n        return [\n          ...virtualModulesPolyfills,\n          // Ensure that the error-guard polyfill is included in the web polyfills to\n          // make metro-runtime work correctly.\n          // TODO: This module is pretty big for a function that simply re-throws an error that doesn't need to be caught.\n          // NOTE(@kitten): This is technically the public API to get polyfills rather than resolving directly into\n          // `@react-native/js-polyfills`. We should really just start vendoring these, but for now, this exclusion works\n          ...rnGetPolyfills().filter((x: string) => !x.includes('/console')),\n        ];\n      } catch (error: any) {\n        if ('code' in error && error.code === 'MODULE_NOT_FOUND') {\n          // If react-native is not installed, because we're targeting web, we still continue\n          // This should be rare, but we add it so we don't unnecessarily have a fixed peer dependency on react-native\n          debug(\n            'Skipping react-native/rn-get-polyfills from getPolyfills. react-native is not installed.'\n          );\n          return virtualModulesPolyfills;\n        } else {\n          throw error;\n        }\n      }\n    }\n\n    // Generally uses `@expo/metro-config`'s `getPolyfills` function, unless overridden\n    const polyfills = originalGetPolyfills(ctx);\n    return [\n      ...polyfills,\n      ...virtualModulesPolyfills,\n      // Removed on server platforms during the transform.\n      require.resolve('expo/virtual/streams.js'),\n    ];\n  };\n\n  return {\n    ...config,\n    serializer: {\n      ...config.serializer,\n      getPolyfills,\n    },\n  };\n}\n\nfunction normalizeSlashes(p: string) {\n  return p.replace(/\\\\/g, '/');\n}\n\nexport function getNodejsExtensions(srcExts: readonly string[]): string[] {\n  const mjsExts = srcExts.filter((ext) => /mjs$/.test(ext));\n  const nodejsSourceExtensions = srcExts.filter((ext) => !/mjs$/.test(ext));\n  // find index of last `*.js` extension\n  const jsIndex = nodejsSourceExtensions.reduce((index, ext, i) => {\n    return /jsx?$/.test(ext) ? i : index;\n  }, -1);\n\n  // insert `*.mjs` extensions after `*.js` extensions\n  nodejsSourceExtensions.splice(jsIndex + 1, 0, ...mjsExts);\n\n  return nodejsSourceExtensions;\n}\n\n/**\n * Apply custom resolvers to do the following:\n * - Disable `.native.js` extensions on web.\n * - Alias `react-native` to `react-native-web` on web.\n * - Redirect `react-native-web/dist/modules/AssetRegistry/index.js` to `@react-native/assets/registry.js` on web.\n * - Add support for `tsconfig.json`/`jsconfig.json` aliases via `compilerOptions.paths`.\n * - Alias react-native renderer code to a vendored React canary build on native.\n */\nexport function withExtendedResolver(\n  config: ConfigT,\n  {\n    tsconfig,\n    autolinkingModuleResolverInput,\n    isTsconfigPathsEnabled,\n    isFastResolverEnabled,\n    isExporting,\n    isReactCanaryEnabled,\n    isReactServerComponentsEnabled,\n    getMetroBundler,\n  }: {\n    tsconfig: TsConfigPaths | null;\n    autolinkingModuleResolverInput?: AutolinkingModuleResolverInput;\n    isTsconfigPathsEnabled?: boolean;\n    isFastResolverEnabled?: boolean;\n    isExporting?: boolean;\n    isReactCanaryEnabled?: boolean;\n    isReactServerComponentsEnabled?: boolean;\n    getMetroBundler: () => Bundler;\n  }\n) {\n  if (isReactServerComponentsEnabled) {\n    Log.warn(`React Server Components (beta) is enabled.`);\n  }\n  if (isReactCanaryEnabled) {\n    Log.warn(`Experimental React 19 canary is enabled.`);\n  }\n  if (isFastResolverEnabled) {\n    Log.log(chalk.dim`Fast resolver is enabled.`);\n  }\n\n  const defaultResolver = metroResolver;\n  const resolver = isFastResolverEnabled\n    ? createFastResolver({\n        preserveSymlinks: true,\n        blockList: !config.resolver?.blockList\n          ? []\n          : Array.isArray(config.resolver?.blockList)\n            ? config.resolver?.blockList\n            : [config.resolver?.blockList],\n      })\n    : defaultResolver;\n\n  const aliases: { [key: string]: Record<string, string> } = {\n    web: {\n      'react-native': 'react-native-web',\n      'react-native/index': 'react-native-web',\n      'react-native/Libraries/Image/resolveAssetSource': 'expo-asset/build/resolveAssetSource',\n    },\n  };\n\n  // The vendored canary modules live inside /static/canary-full/node_modules\n  // Adding the `index.js` allows us to add this path as `originModulePath` to\n  // resolve the nested `node_modules` folder properly.\n  const canaryModulesPath = path.join(\n    require.resolve('@expo/cli/package.json'),\n    '../static/canary-full/index.js'\n  );\n\n  let _universalAliases: [RegExp, string][] | null;\n\n  function getUniversalAliases() {\n    if (_universalAliases) {\n      return _universalAliases;\n    }\n\n    _universalAliases = [];\n\n    // This package is currently always installed as it is included in the `expo` package.\n    if (resolveFrom.silent(config.projectRoot, '@expo/vector-icons')) {\n      debug('Enabling alias: react-native-vector-icons -> @expo/vector-icons');\n      _universalAliases.push([/^react-native-vector-icons(\\/.*)?/, '@expo/vector-icons$1']);\n    }\n    if (isReactServerComponentsEnabled) {\n      if (resolveFrom.silent(config.projectRoot, 'expo-router/rsc')) {\n        debug('Enabling bridge alias: expo-router -> expo-router/rsc');\n        _universalAliases.push([/^expo-router$/, 'expo-router/rsc']);\n        // Bridge the internal entry point which is a standalone import to ensure package.json resolution works as expected.\n        _universalAliases.push([/^expo-router\\/entry-classic$/, 'expo-router/rsc/entry']);\n      }\n    }\n    return _universalAliases;\n  }\n\n  // used to resolve externals in `requestCustomExternals` from the project root\n  const projectRootOriginPath = path.join(config.projectRoot, 'package.json');\n\n  const preferredMainFields: { [key: string]: string[] } = {\n    // Defaults from Expo Webpack. Most packages using `react-native` don't support web\n    // in the `react-native` field, so we should prefer the `browser` field.\n    // https://github.com/expo/router/issues/37\n    web: ['browser', 'module', 'main'],\n  };\n\n  let tsConfigResolve =\n    isTsconfigPathsEnabled && (tsconfig?.paths || tsconfig?.baseUrl != null)\n      ? resolveWithTsConfigPaths.bind(resolveWithTsConfigPaths, {\n          paths: tsconfig.paths ?? {},\n          baseUrl: tsconfig.baseUrl ?? config.projectRoot,\n          hasBaseUrl: !!tsconfig.baseUrl,\n        })\n      : null;\n\n  // TODO: Move this to be a transform key for invalidation.\n  if (!isExporting && isInteractive()) {\n    if (isTsconfigPathsEnabled) {\n      // TODO: We should track all the files that used imports and invalidate them\n      // currently the user will need to save all the files that use imports to\n      // use the new aliases.\n      const configWatcher = new FileNotifier(config.projectRoot, [\n        './tsconfig.json',\n        './jsconfig.json',\n      ]);\n      configWatcher.startObserving(() => {\n        debug('Reloading tsconfig.json');\n        loadTsConfigPathsAsync(config.projectRoot).then((tsConfigPaths) => {\n          if (tsConfigPaths?.paths && !!Object.keys(tsConfigPaths.paths).length) {\n            debug('Enabling tsconfig.json paths support');\n            tsConfigResolve = resolveWithTsConfigPaths.bind(resolveWithTsConfigPaths, {\n              paths: tsConfigPaths.paths ?? {},\n              baseUrl: tsConfigPaths.baseUrl ?? config.projectRoot,\n              hasBaseUrl: !!tsConfigPaths.baseUrl,\n            });\n          } else {\n            debug('Disabling tsconfig.json paths support');\n            tsConfigResolve = null;\n          }\n        });\n      });\n\n      // TODO: This probably prevents the process from exiting.\n      installExitHooks(() => {\n        configWatcher.stopObserving();\n      });\n    } else {\n      debug('Skipping tsconfig.json paths support');\n    }\n  }\n\n  let nodejsSourceExtensions: string[] | null = null;\n\n  const getStrictResolver: StrictResolverFactory = (\n    { resolveRequest, ...context },\n    platform\n  ): StrictResolver => {\n    return function doResolve(moduleName: string): Resolution {\n      return resolver(context, moduleName, platform);\n    };\n  };\n\n  function getOptionalResolver(context: ResolutionContext, platform: string | null) {\n    const doResolve = getStrictResolver(context, platform);\n    return function optionalResolve(moduleName: string): Resolution | null {\n      try {\n        return doResolve(moduleName);\n      } catch (error) {\n        // If the error is directly related to a resolver not being able to resolve a module, then\n        // we can ignore the error and try the next resolver. Otherwise, we should throw the error.\n        const isResolutionError =\n          isFailedToResolveNameError(error) || isFailedToResolvePathError(error);\n        if (!isResolutionError) {\n          throw error;\n        }\n      }\n      return null;\n    };\n  }\n\n  // TODO: This is a hack to get resolveWeak working.\n  const idFactory = (config.serializer?.createModuleIdFactory?.() ??\n    ((id: number | string, context: { platform: string; environment?: string }): number | string =>\n      id)) as (\n    id: number | string,\n    context: { platform: string; environment?: string }\n  ) => number | string;\n\n  // We're manually resolving the `asyncRequireModulePath` since it's a module request\n  // However, in isolated installations it might not resolve from all paths, so we're resolving\n  // it from the project root manually\n  let _asyncRequireModuleResolvedPath: string | null | undefined;\n  const getAsyncRequireModule = () => {\n    if (_asyncRequireModuleResolvedPath === undefined) {\n      _asyncRequireModuleResolvedPath =\n        resolveFrom.silent(config.projectRoot, config.transformer.asyncRequireModulePath) ?? null;\n    }\n    return _asyncRequireModuleResolvedPath\n      ? ({ type: 'sourceFile', filePath: _asyncRequireModuleResolvedPath } as const)\n      : null;\n  };\n\n  const getAssetRegistryModule = () => {\n    const virtualModuleId = `\\0polyfill:assets-registry`;\n    getMetroBundlerWithVirtualModules(getMetroBundler()).setVirtualModule(\n      virtualModuleId,\n      ASSET_REGISTRY_SRC\n    );\n    return {\n      type: 'sourceFile',\n      filePath: virtualModuleId,\n    } as const;\n  };\n\n  // If Node.js pass-through, then remap to a module like `module.exports = $$require_external(<module>)`.\n  // If module should be shimmed, remap to an empty module.\n  const externals: {\n    match: (context: ResolutionContext, moduleName: string, platform: string | null) => boolean;\n    replace: 'empty' | 'node' | 'weak';\n  }[] = [\n    {\n      match: (context: ResolutionContext, moduleName: string) => {\n        if (\n          // Disable internal externals when exporting for production.\n          context.customResolverOptions.exporting ||\n          // These externals are only for Node.js environments.\n          !isServerEnvironment(context.customResolverOptions?.environment)\n        ) {\n          return false;\n        }\n\n        if (context.customResolverOptions?.environment === 'react-server') {\n          // Ensure these non-react-server modules are excluded when bundling for React Server Components in development.\n          return /^(source-map-support(\\/.*)?|@babel\\/runtime\\/.+|debug|metro-runtime\\/src\\/modules\\/HMRClient|metro|acorn-loose|acorn|chalk|ws|ansi-styles|supports-color|color-convert|has-flag|utf-8-validate|color-name|react-refresh\\/runtime|@remix-run\\/node\\/.+)$/.test(\n            moduleName\n          );\n        }\n\n        // TODO: Windows doesn't support externals somehow.\n        if (process.platform === 'win32') {\n          return /^(source-map-support(\\/.*)?)$/.test(moduleName);\n        }\n\n        // Extern these modules in standard Node.js environments in development to prevent API routes side-effects\n        // from leaking into the dev server process.\n        return /^(source-map-support(\\/.*)?|react|@radix-ui\\/.+|@babel\\/runtime\\/.+|react-dom(\\/.+)?|debug|acorn-loose|acorn|css-in-js-utils\\/lib\\/.+|hyphenate-style-name|color|color-string|color-convert|color-name|fontfaceobserver|fast-deep-equal|query-string|escape-string-regexp|invariant|postcss-value-parser|memoize-one|nullthrows|strict-uri-encode|decode-uri-component|split-on-first|filter-obj|warn-once|simple-swizzle|is-arrayish|inline-style-prefixer\\/.+)$/.test(\n          moduleName\n        );\n      },\n      replace: 'node',\n    },\n    // Externals to speed up async split chunks by extern-ing common packages that appear in the root client chunk.\n    {\n      match: (context: ResolutionContext, moduleName: string, platform: string | null) => {\n        if (\n          // Disable internal externals when exporting for production.\n          context.customResolverOptions.exporting ||\n          // These externals are only for client environments.\n          isServerEnvironment(context.customResolverOptions?.environment) ||\n          // Only enable for client boundaries\n          !context.customResolverOptions.clientboundary\n        ) {\n          return false;\n        }\n\n        // We don't support this in the resolver at the moment.\n        if (moduleName.endsWith('/package.json')) {\n          return false;\n        }\n\n        const isExternal = // Extern these modules in standard Node.js environments.\n          /^(deprecated-react-native-prop-types|react|react\\/jsx-dev-runtime|scheduler|react-native|react-dom(\\/.+)?|metro-runtime(\\/.+)?)$/.test(\n            moduleName\n          ) ||\n          // TODO: Add more\n          /^@babel\\/runtime\\/helpers\\/(wrapNativeSuper)$/.test(moduleName);\n\n        return isExternal;\n      },\n      replace: 'weak',\n    },\n  ];\n\n  const metroConfigWithCustomResolver = withMetroResolvers(config, [\n    // Mock out production react imports in development.\n    function requestDevMockProdReact(\n      context: ResolutionContext,\n      moduleName: string,\n      platform: string | null\n    ) {\n      // This resolution is dev-only to prevent bundling the production React packages in development.\n      if (!context.dev) return null;\n\n      if (\n        // Match react-native renderers.\n        (platform !== 'web' &&\n          context.originModulePath.match(/[\\\\/]node_modules[\\\\/]react-native[\\\\/]/) &&\n          moduleName.match(/([\\\\/]ReactFabric|ReactNativeRenderer)-prod/)) ||\n        // Match react production imports.\n        (moduleName.match(/\\.production(\\.min)?\\.js$/) &&\n          // Match if the import originated from a react package.\n          context.originModulePath.match(/[\\\\/]node_modules[\\\\/](react[-\\\\/]|scheduler[\\\\/])/))\n      ) {\n        debug(`Skipping production module: ${moduleName}`);\n        // /Users/path/to/expo/node_modules/react/index.js ./cjs/react.production.min.js\n        // /Users/path/to/expo/node_modules/react/jsx-dev-runtime.js ./cjs/react-jsx-dev-runtime.production.min.js\n        // /Users/path/to/expo/node_modules/react-is/index.js ./cjs/react-is.production.min.js\n        // /Users/path/to/expo/node_modules/react-refresh/runtime.js ./cjs/react-refresh-runtime.production.min.js\n        // /Users/path/to/expo/node_modules/react-native/node_modules/scheduler/index.native.js ./cjs/scheduler.native.production.min.js\n        // /Users/path/to/expo/node_modules/react-native/node_modules/react-is/index.js ./cjs/react-is.production.min.js\n        return {\n          type: 'empty',\n        };\n      }\n      return null;\n    },\n    // tsconfig paths\n    function requestTsconfigPaths(\n      context: ResolutionContext,\n      moduleName: string,\n      platform: string | null\n    ) {\n      return (\n        tsConfigResolve?.(\n          {\n            originModulePath: context.originModulePath,\n            moduleName,\n          },\n          getOptionalResolver(context, platform)\n        ) ?? null\n      );\n    },\n\n    // Node.js externals support\n    function requestNodeExternals(\n      context: ResolutionContext,\n      moduleName: string,\n      platform: string | null\n    ) {\n      const isServer =\n        context.customResolverOptions?.environment === 'node' ||\n        context.customResolverOptions?.environment === 'react-server';\n\n      const moduleId = isNodeExternal(moduleName);\n      if (!moduleId) {\n        return null;\n      }\n\n      if (\n        // In browser runtimes, we want to either resolve a local node module by the same name, or shim the module to\n        // prevent crashing when Node.js built-ins are imported.\n        !isServer\n      ) {\n        // Perform optional resolve first. If the module doesn't exist (no module in the node_modules)\n        // then we can mock the file to use an empty module.\n        const result = getOptionalResolver(context, platform)(moduleName);\n\n        if (!result && platform !== 'web') {\n          // Preserve previous behavior where native throws an error on node.js internals.\n          return null;\n        }\n\n        return (\n          result ?? {\n            // In this case, mock the file to use an empty module.\n            type: 'empty',\n          }\n        );\n      }\n      const contents = `module.exports=$$require_external('node:${moduleId}');`;\n      debug(`Virtualizing Node.js \"${moduleId}\"`);\n      const virtualModuleId = `\\0node:${moduleId}`;\n      getMetroBundlerWithVirtualModules(getMetroBundler()).setVirtualModule(\n        virtualModuleId,\n        contents\n      );\n      return {\n        type: 'sourceFile',\n        filePath: virtualModuleId,\n      };\n    },\n\n    // Custom externals support\n    function requestCustomExternals(\n      context: ResolutionContext,\n      moduleName: string,\n      platform: string | null\n    ) {\n      // We don't support this in the resolver at the moment.\n      if (moduleName.endsWith('/package.json')) {\n        return null;\n      }\n      // Skip applying JS externals for CSS files.\n      if (/\\.(s?css|sass)$/.test(context.originModulePath)) {\n        return null;\n      }\n\n      for (const external of externals) {\n        if (external.match(context, moduleName, platform)) {\n          if (external.replace === 'empty') {\n            debug(`Redirecting external \"${moduleName}\" to \"${external.replace}\"`);\n            return {\n              type: external.replace,\n            };\n          } else if (external.replace === 'weak') {\n            // TODO: Make this use require.resolveWeak again. Previously this was just resolving to the same path.\n            const realModule = getStrictResolver(context, platform)(moduleName);\n            const realPath = realModule.type === 'sourceFile' ? realModule.filePath : moduleName;\n            const opaqueId = idFactory(realPath, {\n              platform: platform!,\n              environment: context.customResolverOptions?.environment,\n            });\n            const contents =\n              typeof opaqueId === 'number'\n                ? `module.exports=/*${moduleName}*/__r(${opaqueId})`\n                : `module.exports=/*${moduleName}*/__r(${JSON.stringify(opaqueId)})`;\n            // const contents = `module.exports=/*${moduleName}*/__r(require.resolveWeak('${moduleName}'))`;\n            // const generatedModuleId = fastHashMemoized(contents);\n            const virtualModuleId = `\\0weak:${opaqueId}`;\n            debug('Virtualizing module:', moduleName, '->', virtualModuleId);\n            getMetroBundlerWithVirtualModules(getMetroBundler()).setVirtualModule(\n              virtualModuleId,\n              contents\n            );\n            return {\n              type: 'sourceFile',\n              filePath: virtualModuleId,\n            };\n          } else if (external.replace === 'node') {\n            // TODO(@kitten): Temporary workaround. Our externals logic here isn't generic and only works\n            // for development and not exports. We never intend to use it in exported production bundles,\n            // however, this is still a dangerous implementation. To protect us from externalizing modules\n            // that aren't available to the app, we force any resolution to happen via the project root\n            const projectRootContext: ResolutionContext = {\n              ...context,\n              nodeModulesPaths: [],\n              originModulePath: projectRootOriginPath,\n              disableHierarchicalLookup: false,\n            };\n            const externModule = getStrictResolver(projectRootContext, platform)(moduleName);\n            if (externModule.type !== 'sourceFile') {\n              return null;\n            }\n            const contents = `module.exports=$$require_external('${moduleName}')`;\n            const virtualModuleId = `\\0node:${moduleName}`;\n            debug('Virtualizing Node.js (custom):', moduleName, '->', virtualModuleId);\n            getMetroBundlerWithVirtualModules(getMetroBundler()).setVirtualModule(\n              virtualModuleId,\n              contents\n            );\n            return {\n              type: 'sourceFile',\n              filePath: virtualModuleId,\n            };\n          } else {\n            external.replace satisfies never;\n          }\n        }\n      }\n      return null;\n    },\n\n    // Basic moduleId aliases\n    function requestAlias(context: ResolutionContext, moduleName: string, platform: string | null) {\n      // Conditionally remap `react-native` to `react-native-web` on web in\n      // a way that doesn't require Babel to resolve the alias.\n      if (platform && platform in aliases && aliases[platform][moduleName]) {\n        const redirectedModuleName = aliases[platform][moduleName];\n        return getStrictResolver(context, platform)(redirectedModuleName);\n      }\n\n      for (const [matcher, alias] of getUniversalAliases()) {\n        const match = moduleName.match(matcher);\n        if (match) {\n          const aliasedModule = alias.replace(\n            /\\$(\\d+)/g,\n            (_, index) => match[parseInt(index, 10)] ?? ''\n          );\n          const doResolve = getStrictResolver(context, platform);\n          debug(`Alias \"${moduleName}\" to \"${aliasedModule}\"`);\n          return doResolve(aliasedModule);\n        }\n      }\n\n      return null;\n    },\n\n    // Polyfill for asset registry (assetRegistryPath) and async require module (asyncRequireModulePath)\n    function requestStableConfigModules(\n      context: ResolutionContext,\n      moduleName: string,\n      platform: string | null\n    ) {\n      if (moduleName === config.transformer.asyncRequireModulePath) {\n        return getAsyncRequireModule();\n      }\n\n      // TODO(@kitten): Compare against `config.transformer.assetRegistryPath`\n      if (/^@react-native\\/assets-registry\\/registry(\\.js)?$/.test(moduleName)) {\n        return getAssetRegistryModule();\n      }\n\n      if (\n        platform === 'web' &&\n        context.originModulePath.match(/node_modules[\\\\/]react-native-web[\\\\/]/) &&\n        moduleName.includes('/modules/AssetRegistry')\n      ) {\n        return getAssetRegistryModule();\n      }\n\n      return null;\n    },\n\n    createAutolinkingModuleResolver(autolinkingModuleResolverInput, {\n      getStrictResolver,\n    }),\n\n    // TODO: Reduce these as much as possible in the future.\n    // Complex post-resolution rewrites.\n    function requestPostRewrites(\n      context: ResolutionContext,\n      moduleName: string,\n      platform: string | null\n    ) {\n      const doResolve = getStrictResolver(context, platform);\n\n      const result = doResolve(moduleName);\n\n      if (result.type !== 'sourceFile') {\n        return result;\n      }\n\n      const normalizedPath = normalizeSlashes(result.filePath);\n\n      if (normalizedPath.endsWith('expo-router/build/layouts/_web-modal.js')) {\n        if (env.EXPO_UNSTABLE_WEB_MODAL) {\n          try {\n            const webModal = doResolve('expo-router/build/layouts/ExperimentalModalStack.js');\n            if (webModal.type === 'sourceFile') {\n              debug('Using `_unstable-web-modal` implementation.');\n              return webModal;\n            }\n          } catch (error) {\n            // Fallback to react-navigation web modal implementation.\n          }\n        }\n        debug(\"Using React Navigation's web modal implementation.\");\n      }\n\n      if (platform === 'web') {\n        if (result.filePath.includes('node_modules')) {\n          // Disallow importing confusing native modules on web\n          if (\n            [\n              'react-native/Libraries/ReactPrivate/ReactNativePrivateInitializeCore',\n              'react-native/Libraries/Utilities/codegenNativeCommands',\n              'react-native/Libraries/Utilities/codegenNativeComponent',\n            ].some((matcher) =>\n              // Support absolute and modules with .js extensions.\n              moduleName.includes(matcher)\n            )\n          ) {\n            throw new FailedToResolvePathError(\n              `Importing native-only module \"${moduleName}\" on web from: ${path.relative(config.projectRoot, context.originModulePath)}`\n            );\n          }\n\n          // Replace with static shims\n\n          // Drop everything up until the `node_modules` folder.\n          const normalName = normalizedPath.replace(/.*node_modules\\//, '');\n\n          const shimFile = shouldCreateVirtualShim(normalName);\n          if (shimFile) {\n            const virtualId = `\\0shim:${normalName}`;\n            const bundler = getMetroBundlerWithVirtualModules(getMetroBundler());\n            if (!bundler.hasVirtualModule(virtualId)) {\n              bundler.setVirtualModule(virtualId, fs.readFileSync(shimFile, 'utf8'));\n            }\n            debug(`Redirecting module \"${result.filePath}\" to shim`);\n\n            return {\n              ...result,\n              filePath: virtualId,\n            };\n          }\n        }\n      } else {\n        const isServer =\n          context.customResolverOptions?.environment === 'node' ||\n          context.customResolverOptions?.environment === 'react-server';\n\n        // Shim out React Native native runtime globals in server mode for native.\n        if (isServer) {\n          if (normalizedPath.endsWith('react-native/Libraries/Core/InitializeCore.js')) {\n            debug('Shimming out InitializeCore for React Native in native SSR bundle');\n            return {\n              type: 'empty',\n            };\n          }\n        }\n\n        // When server components are enabled, redirect React Native's renderer to the canary build\n        // this will enable the use hook and other requisite features from React 19.\n        if (isReactCanaryEnabled && result.filePath.includes('node_modules')) {\n          const normalName = normalizeSlashes(result.filePath)\n            // Drop everything up until the `node_modules` folder.\n            .replace(/.*node_modules\\//, '');\n\n          const canaryFile = shouldCreateVirtualCanary(normalName);\n          if (canaryFile) {\n            debug(`Redirecting React Native module \"${result.filePath}\" to canary build`);\n            return {\n              ...result,\n              filePath: canaryFile,\n            };\n          }\n        }\n      }\n\n      return result;\n    },\n\n    // If at this point, we haven't resolved a module yet, if it's a module specifier for a known dependency\n    // of either `expo` or `expo-router`, attempt to resolve it from these origin modules instead\n    createFallbackModuleResolver({\n      projectRoot: config.projectRoot,\n      originModuleNames: ['expo', 'expo-router'],\n      getStrictResolver,\n    }),\n  ]);\n\n  // Ensure we mutate the resolution context to include the custom resolver options for server and web.\n  const metroConfigWithCustomContext = withMetroMutatedResolverContext(\n    metroConfigWithCustomResolver,\n    (\n      immutableContext: CustomResolutionContext,\n      moduleName: string,\n      platform: string | null\n    ): CustomResolutionContext => {\n      const context: Mutable<CustomResolutionContext> = {\n        ...immutableContext,\n        preferNativePlatform: platform !== 'web',\n      };\n\n      // TODO: Remove this when we have React 19 in the expo/expo monorepo.\n      if (\n        isReactCanaryEnabled &&\n        // Change the node modules path for react and react-dom to use the vendor in Expo CLI.\n        /^(react|react\\/.*|react-dom|react-dom\\/.*)$/.test(moduleName)\n      ) {\n        // Modifying the origin module path changes the starting Node module resolution path to this folder\n        context.originModulePath = canaryModulesPath;\n        // Hierarchical lookup has to be enabled for this to work\n        context.disableHierarchicalLookup = false;\n      }\n\n      if (isServerEnvironment(context.customResolverOptions?.environment)) {\n        // Adjust nodejs source extensions to sort mjs after js, including platform variants.\n        if (nodejsSourceExtensions === null) {\n          nodejsSourceExtensions = getNodejsExtensions(context.sourceExts);\n        }\n        context.sourceExts = nodejsSourceExtensions;\n\n        context.unstable_enablePackageExports = true;\n        context.unstable_conditionsByPlatform = {};\n\n        const isReactServerComponents =\n          context.customResolverOptions?.environment === 'react-server';\n\n        if (isReactServerComponents) {\n          // NOTE: Align the behavior across server and client. This is a breaking change so we'll just roll it out with React Server Components.\n          // This ensures that react-server and client code both resolve `module` and `main` in the same order.\n          if (platform === 'web') {\n            // Node.js runtimes should only be importing main at the moment.\n            // This is a temporary fix until we can support the package.json exports.\n            context.mainFields = ['module', 'main'];\n          } else {\n            // In Node.js + native, use the standard main fields.\n            context.mainFields = ['react-native', 'module', 'main'];\n          }\n        } else {\n          if (platform === 'web') {\n            // Node.js runtimes should only be importing main at the moment.\n            // This is a temporary fix until we can support the package.json exports.\n            context.mainFields = ['main', 'module'];\n          } else {\n            // In Node.js + native, use the standard main fields.\n            context.mainFields = ['react-native', 'main', 'module'];\n          }\n        }\n\n        // Enable react-server import conditions.\n        if (context.customResolverOptions?.environment === 'react-server') {\n          context.unstable_conditionNames = ['node', 'react-server', 'workerd'];\n        } else {\n          context.unstable_conditionNames = ['node'];\n        }\n      } else {\n        // Non-server changes\n\n        if (!env.EXPO_METRO_NO_MAIN_FIELD_OVERRIDE && platform && platform in preferredMainFields) {\n          context.mainFields = preferredMainFields[platform];\n        }\n      }\n\n      return context;\n    }\n  );\n\n  return withMetroErrorReportingResolver(\n    withMetroSupervisingTransformWorker(metroConfigWithCustomContext)\n  );\n}\n\n/** @returns `true` if the incoming resolution should be swapped. */\nexport function shouldAliasModule(\n  input: {\n    platform: string | null;\n    result: Resolution;\n  },\n  alias: { platform: string; output: string }\n): boolean {\n  return (\n    input.platform === alias.platform &&\n    input.result?.type === 'sourceFile' &&\n    typeof input.result?.filePath === 'string' &&\n    normalizeSlashes(input.result.filePath).endsWith(alias.output)\n  );\n}\n\n/** Add support for `react-native-web` and the Web platform. */\nexport async function withMetroMultiPlatformAsync(\n  projectRoot: string,\n  {\n    config,\n    exp,\n    platformBundlers,\n    isTsconfigPathsEnabled,\n    isAutolinkingResolverEnabled,\n    isFastResolverEnabled,\n    isExporting,\n    isReactCanaryEnabled,\n    isReactServerComponentsEnabled,\n    getMetroBundler,\n  }: {\n    config: ConfigT;\n    exp: ExpoConfig;\n    isTsconfigPathsEnabled: boolean;\n    platformBundlers: PlatformBundlers;\n    isAutolinkingResolverEnabled?: boolean;\n    isFastResolverEnabled?: boolean;\n    isExporting?: boolean;\n    isReactCanaryEnabled: boolean;\n    isReactServerComponentsEnabled: boolean;\n    isNamedRequiresEnabled: boolean;\n    getMetroBundler: () => Bundler;\n  }\n) {\n  // Change the default metro-runtime to a custom one that supports bundle splitting.\n  // NOTE(@kitten): This is now always active and EXPO_USE_METRO_REQUIRE / isNamedRequiresEnabled is disregarded\n  const metroDefaults: Mutable<\n    typeof import('@expo/metro/metro-config/defaults/defaults')\n  > = require('@expo/metro/metro-config/defaults/defaults');\n  metroDefaults.moduleSystem = require.resolve('@expo/cli/build/metro-require/require');\n\n  if (!config.projectRoot) {\n    // @ts-expect-error: read-only types\n    config.projectRoot = projectRoot;\n  }\n\n  // Required for @expo/metro-runtime to format paths in the web LogBox.\n  process.env.EXPO_PUBLIC_PROJECT_ROOT = process.env.EXPO_PUBLIC_PROJECT_ROOT ?? projectRoot;\n\n  // This is used for running Expo CLI in development against projects outside the monorepo.\n  if (!isDirectoryIn(__dirname, projectRoot)) {\n    // TODO(@kitten): Remove ts-export-errors here and replace with cast for type safety\n    if (!config.watchFolders) {\n      // @ts-expect-error: watchFolders is readonly\n      config.watchFolders = [];\n    }\n    // @ts-expect-error: watchFolders is readonly\n    config.watchFolders.push(path.join(require.resolve('metro-runtime/package.json'), '../..'));\n    // @ts-expect-error: watchFolders is readonly\n    config.watchFolders.push(\n      path.join(require.resolve('@expo/metro-config/package.json'), '../..'),\n      // For virtual modules\n      path.join(require.resolve('expo/package.json'), '..')\n    );\n    if (isReactCanaryEnabled) {\n      // @ts-expect-error: watchFolders is readonly\n      config.watchFolders.push(path.join(require.resolve('@expo/cli/package.json'), '..'));\n    }\n  }\n\n  let tsconfig: null | TsConfigPaths = null;\n\n  if (isTsconfigPathsEnabled) {\n    tsconfig = await loadTsConfigPathsAsync(projectRoot);\n  }\n\n  let expoConfigPlatforms = Object.entries(platformBundlers)\n    .filter(\n      ([platform, bundler]) => bundler === 'metro' && exp.platforms?.includes(platform as Platform)\n    )\n    .map(([platform]) => platform);\n\n  if (Array.isArray(config.resolver.platforms)) {\n    expoConfigPlatforms = [...new Set(expoConfigPlatforms.concat(config.resolver.platforms))];\n  }\n\n  // @ts-expect-error: typed as `readonly`.\n  config.resolver.platforms = expoConfigPlatforms;\n\n  config = withWebPolyfills(config, { getMetroBundler });\n\n  let autolinkingModuleResolverInput: AutolinkingModuleResolverInput | undefined;\n  if (isAutolinkingResolverEnabled) {\n    autolinkingModuleResolverInput = await createAutolinkingModuleResolverInput({\n      platforms: expoConfigPlatforms,\n      projectRoot,\n    });\n  }\n\n  return withExtendedResolver(config, {\n    autolinkingModuleResolverInput,\n    tsconfig,\n    isExporting,\n    isTsconfigPathsEnabled,\n    isFastResolverEnabled,\n    isReactCanaryEnabled,\n    isReactServerComponentsEnabled,\n    getMetroBundler,\n  });\n}\n\nfunction isDirectoryIn(targetPath: string, rootPath: string) {\n  return targetPath.startsWith(rootPath) && targetPath.length >= rootPath.length;\n}\n"],"names":["getNodejsExtensions","shouldAliasModule","withExtendedResolver","withMetroMultiPlatformAsync","ASSET_REGISTRY_SRC","debug","require","withWebPolyfills","config","getMetroBundler","originalGetPolyfills","serializer","getPolyfills","bind","ctx","virtualEnvVarId","getMetroBundlerWithVirtualModules","setVirtualModule","virtualModuleId","platform","virtualModulesPolyfills","rnGetPolyfills","filter","x","includes","error","code","polyfills","resolve","normalizeSlashes","p","replace","srcExts","mjsExts","ext","test","nodejsSourceExtensions","jsIndex","reduce","index","i","splice","tsconfig","autolinkingModuleResolverInput","isTsconfigPathsEnabled","isFastResolverEnabled","isExporting","isReactCanaryEnabled","isReactServerComponentsEnabled","Log","warn","log","chalk","dim","defaultResolver","metroResolver","resolver","createFastResolver","preserveSymlinks","blockList","Array","isArray","aliases","web","canaryModulesPath","path","join","_universalAliases","getUniversalAliases","resolveFrom","silent","projectRoot","push","projectRootOriginPath","preferredMainFields","tsConfigResolve","paths","baseUrl","resolveWithTsConfigPaths","hasBaseUrl","isInteractive","configWatcher","FileNotifier","startObserving","loadTsConfigPathsAsync","then","tsConfigPaths","Object","keys","length","installExitHooks","stopObserving","getStrictResolver","resolveRequest","context","doResolve","moduleName","getOptionalResolver","optionalResolve","isResolutionError","isFailedToResolveNameError","isFailedToResolvePathError","idFactory","createModuleIdFactory","id","_asyncRequireModuleResolvedPath","getAsyncRequireModule","undefined","transformer","asyncRequireModulePath","type","filePath","getAssetRegistryModule","externals","match","customResolverOptions","exporting","isServerEnvironment","environment","process","clientboundary","endsWith","isExternal","metroConfigWithCustomResolver","withMetroResolvers","requestDevMockProdReact","dev","originModulePath","requestTsconfigPaths","requestNodeExternals","isServer","moduleId","isNodeExternal","result","contents","requestCustomExternals","external","realModule","realPath","opaqueId","JSON","stringify","projectRootContext","nodeModulesPaths","disableHierarchicalLookup","externModule","requestAlias","redirectedModuleName","matcher","alias","aliasedModule","_","parseInt","requestStableConfigModules","createAutolinkingModuleResolver","requestPostRewrites","normalizedPath","env","EXPO_UNSTABLE_WEB_MODAL","webModal","some","FailedToResolvePathError","relative","normalName","shimFile","shouldCreateVirtualShim","virtualId","bundler","hasVirtualModule","fs","readFileSync","canaryFile","shouldCreateVirtualCanary","createFallbackModuleResolver","originModuleNames","metroConfigWithCustomContext","withMetroMutatedResolverContext","immutableContext","preferNativePlatform","sourceExts","unstable_enablePackageExports","unstable_conditionsByPlatform","isReactServerComponents","mainFields","unstable_conditionNames","EXPO_METRO_NO_MAIN_FIELD_OVERRIDE","withMetroErrorReportingResolver","withMetroSupervisingTransformWorker","input","output","exp","platformBundlers","isAutolinkingResolverEnabled","metroDefaults","moduleSystem","EXPO_PUBLIC_PROJECT_ROOT","isDirectoryIn","__dirname","watchFolders","expoConfigPlatforms","entries","platforms","map","Set","concat","createAutolinkingModuleResolverInput","targetPath","rootPath","startsWith"],"mappings":"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"}